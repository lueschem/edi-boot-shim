#!/bin/bash

# Run package build within a virgin Ubuntu/Debian container.

set -o errexit
set -o pipefail
set -o nounset

PACKAGE_NAME=edi-boot-shim
# there is no VERSION_ID in trixie/sid yet
VERSION_ID="13"
VERSION="13 (trixie)"
source /etc/os-release

SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "${SCRIPTDIR}/../.."

export DEBIAN_FRONTEND=noninteractive
apt-get update > /dev/null
apt-get --no-install-recommends -y install sudo adduser > /dev/null

TESTUSER=ediuser
TESTUSERHOME=/home/${TESTUSER}
adduser --disabled-password --gecos "" ${TESTUSER}
usermod -a -G adm ${TESTUSER}

apt-get --no-install-recommends -y install git > /dev/null

git config --system user.email "lueschem@gmail.com"
git config --system user.name "Matthias Luescher"
git config --global --add safe.directory "$(pwd)"
git config --global --add safe.directory "${TESTUSERHOME}/${PACKAGE_NAME}"

if [[ $EUID -ne 0 ]]
then
   >&2 echo "Error: This script must be run as root."
   exit 1
fi

if ! git diff --exit-code --quiet
then
    >&2 echo "Error: there are unstaged changes!"
    exit 1
fi

if ! git diff --cached --exit-code --quiet
then
    >&2 echo "Error: there are uncommitted changes!"
    exit 1
fi

sudo -H -u ${TESTUSER} git clone .git ${TESTUSERHOME}/${PACKAGE_NAME}

apt-get -y --no-install-recommends install git-buildpackage dh-make equivs lintian > /dev/null

CONTAINER_WORK="${TESTUSERHOME}/${PACKAGE_NAME}"
cd ${CONTAINER_WORK}

RAW_VERSION="$(dpkg-parsechangelog --show-field Version | cut -d'+' -f1)"

if [ "${ID}" == "debian" ]
then
    NEW_VERSION="${RAW_VERSION}+deb${VERSION_ID//./}"
    VERSION_CODENAME=$(echo "${VERSION}" | awk -F"[)(]+" '{print $2}')
else
    >&2 echo "Error: unhandled operating system id (${ID})!"
    exit 1
fi

GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "${GIT_BRANCH}" != "master" ]
then
    NEW_VERSION="${NEW_VERSION}$(git describe --always --tags 2>/dev/null | sed -r s/^v//g | sed -r 's/[0-9]+.[0-9]+.[0-9]+-([0-9]+)-(.*)/r\1\2/g')"
fi

dch -b --newversion "${NEW_VERSION}" --distribution "${VERSION_CODENAME}" -m "Automatic ${VERSION_CODENAME} build."

sudo -H -u ${TESTUSER} git add debian/changelog
sudo -H -u ${TESTUSER} git commit -m "New version ${NEW_VERSION}."
sudo -H -u ${TESTUSER} git tag -a "v${NEW_VERSION}" -m "New version ${NEW_VERSION}."

mk-build-deps -i debian/control -t "apt-get -y" > /dev/null

sudo -H -u ${TESTUSER} debuild -us -uc > /dev/null

BUILD_OUTPUT="${SCRIPTDIR}/../../build-output"
mkdir -p "${BUILD_OUTPUT}"
cp -f ../${PACKAGE_NAME}_"${NEW_VERSION}"* "${BUILD_OUTPUT}"

cat << EOF > "${BUILD_OUTPUT}/build-info"
PACKAGE_NAME=${PACKAGE_NAME}
PACKAGE_VERSION=${NEW_VERSION}
EOF

echo "========"
echo "Success!"
echo "========"
